.blacklist [
	"logic pro x"
]
# meh : shift + ctrl + alt (caps lock)
# hyper : shift + cmd + ctrl + alt (pas possible de faire des alias pour
# l'instant. Donc pas de hyper - alt - quelque chose)
#
# Reload yabai
meh - r : launchctl kickstart -k "gui/${UID}/homebrew.mxcl.yabai"

# Hyper : caps_lock mapped to shift + ctrl + alt (meh)
# MODES 
#
# add an on_enter command to the default mode
:: default : yabai -m config layout bsp; yabai -m config top_padding 5; yabai -m config bottom_padding 5; yabai -m config left_padding 5; yabai -m config right_padding 5; yabai -m config window_gap 5
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
:: test : yabai -m config layout float; yabai -m config window_border off; yabai -m config top_padding 0; yabai -m config bottom_padding 0; yabai -m config left_padding 0; yabai -m config right_padding 0; yabai -m config window_gap 0;
## mode Logic 
:: logic : yabai -m config layout float
# from 'default' mode, activate mode 'test'
default < meh - m ; test
# from 'test' mode, activate mode 'default'
test < meh - m ; default
# from default or test mode, activate 'logic'
default < meh - 0x43 ; logic
logic < meh - 0x43 ; default

# shutdown lights
# meh - l : killall limelight

# # Launch stuff with caps lock + cmd 
# hyper - return : osascript /Users/leo/Documents/Scripts/iTerm.scpt
hyper - return : kitty -d ~
# hyper - return : \
# 	yabai -m signal --add label=float_next_window_created event=window_created action='yabai -m signal --remove float_next_window_created; yabai -m signal --remove float_next_application_launched; yabai -m window $YABAI_WINDOW_ID --toggle float' ; \
# 	yabai -m signal --add label=float_next_application_launched event=application_launched action='yabai -m signal --remove float_next_window_created; yabai -m signal --remove float_next_application_launched; yabai -m query --windows | jq -r ".[] | select(.pid == $YABAI_PROCESS_ID).id" | xargs -I{} yabai -m window {} --toggle float' ; \
# 	osascript -e 'tell application "iTerm2" to create window with default profile
#
#
hyper - f : kitty -T=Float zsh -c vifm
# hyper - f : kitty -T Float zsh -c "vifm ~/Documents/Notes ~" 
hyper - n : kitty -T=Float zsh -c "sh ~/Documents/Scripts/notes"
# hyper -f : \ 
# 	yabai -m signal --add label=float_next_window_created event=window_created action='yabai -m signal --remove float_next_window_created; yabai -m signal --remove float_next_application_launched; yabai -m window $YABAI_WINDOW_ID --toggle float' ; \ 
# 	yabai -m signal --add label=float_next_application_launched event=application_launched action='yabai -m signal --remove float_next_window_created; yabai -m signal --remove float_next_application_launched; yabai -m query --windows | jq -r ".[] | select(.pid == $YABAI_PROCESS_ID).id" | xargs -I{} yabai -m window {} --toggle float' ; \
# 	/Applications/iTerm.app/Contents/MacOS/iTerm2 

# hyper - f : . $HOME/.config/bin/helper && new_window "kitty" "float"
# hyper - f : osascript /Users/leo/Documents/Scripts/vifm.scpt

# focus window
# Pour la formule magique : https://github.com/koekeishiya/yabai/issues/113
alt - h : yabai -m window --focus west || yabai -m window --focus "$(yabai -m query --windows | jq -re "sort_by(.display, .space, .frame.x, .frame.y, .id) | map(select(.\"is-visible\" == true and .role != \"AXUnknown\")) | reverse | nth(index(map(select(.\"has-focus\" == true))) - 1).id")"
# alt - h : yabai -m window --focus west || yabai -m window --focus "$(yabai -m query --windows | jq -re "sort_by(.display, .frame.x, .frame.y, .id) | map(select(.visible == 1 and .subrole != \"AXUnknown\")) | reverse | nth(index(map(select(.focused == 1))) - 1).id")"
alt - j : yabai -m window --focus south || yabai -m window --focus stack.next || yabai -m window --focus stack.first
alt - k : yabai -m window --focus north || yabai -m window --focus stack.prev || yabai -m window --focus stack.last
alt - l : yabai -m window --focus east || yabai -m window --focus "$(yabai -m query --windows | jq -re "sort_by(.display, .space, .frame.x, .frame.y, .id) | map(select(.\"is-visible\" == true and .role != \"AXUnknown\")) | nth(index(map(select(.\"has-focus\" == true))) - 1).id")"
alt - l : yabai -m window --focus east || yabai -m window --focus next || yabai -m window focus prev|| yabai -m window --focus "$(yabai -m query --windows | jq -re "sort_by(.display, .frame.x, .frame.y, .id) | map(select(.visible == 1 and .subrole != \"AXUnknown\")) | nth(index(map(select(.focused == 1))) - 1).id")"
alt - c : yabai -m window --focus recent # ne respecte pas le bureau dans lequel on est
	# focus between all visible windows sorted by coordinates -> display
	# index
# swap window
shift + alt - h : yabai -m window --swap west
shift + alt - j : yabai -m window --swap south
shift + alt - k : yabai -m window --swap north
# shift + alt - l : yabai -m window --swap east
alt - 0x24 : yabai -m window --swap largest

# move window
shift + cmd - h : yabai -m window --warp west
shift + cmd - j : yabai -m window --warp south
shift + cmd - k : yabai -m window --warp north
shift + cmd - l : yabai -m window --warp east

# increase window size with caps + =
meh - 0x18 : yabai -m window --resize right:20:0 || yabai -m window --resize left:-20:0
# decrease window size with caps + )
meh - 0x1B : yabai -m window --resize right:-20:0 || yabai -m window --resize left:20:0

# rotate tree
# meh - r : yabai -m space --rotate 90
# mirror tree y-axis
meh - y : yabai -m space --mirror y-axis
# mirror tree x-axis
meh - x : yabai -m space --mirror x-axis

# toggle desktop offset
meh - a : yabai -m space --toggle padding; yabai -m space --toggle gap

# fast focus desktop
meh - c : yabai -m space --focus recent
meh - h : yabai -m space --focus prev
meh - l : yabai -m space --focus next
meh - 0x53 : yabai -m space --focus 1
meh - 0x12 : yabai -m space --focus 1
meh - 0x54 : yabai -m space --focus 2
meh - 0x13 : yabai -m space --focus 2
meh - 0x55 : yabai -m space --focus 3
meh - 0x14 : yabai -m space --focus 3
meh - 0x56 : yabai -m space --focus 4
meh - 0x15 : yabai -m space --focus 4
meh - 0x57 : yabai -m space --focus 5
meh - 0x17 : yabai -m space --focus 5
meh - 0x58 : yabai -m space --focus 6
meh - 0x16 : yabai -m space --focus 6
meh - 0x59 : yabai -m space --focus 7
meh - 0x1A : yabai -m space --focus 7
meh - 0x5B : yabai -m space --focus 8
meh - 0x1C : yabai -m space --focus 8
meh - 0x5C: yabai -m space --focus 9
meh - 0x19: yabai -m space --focus 9
meh - 0x1E: yabai -m space --focus 10 # $
meh - 0x4E: yabai -m space --focus 10 # - (numpad)

# send window to desktop and follow focus
meh + cmd - c : yabai -m window --space recent; yabai -m space --focus recent
meh + cmd - h : yabai -m window --space prev; yabai -m space --focus prev
meh + cmd - l : yabai -m window --space next; yabai -m space --focus next
meh + cmd - 1 : yabai -m window --space  1; yabai -m space --focus 1
meh + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2
meh + cmd - 3 : yabai -m window --space  3; yabai -m space --focus 3
meh + cmd - 4 : yabai -m window --space  4; yabai -m space --focus 4
meh + cmd - 5 : yabai -m window --space  5; yabai -m space --focus 5
meh + cmd - 6 : yabai -m window --space  6; yabai -m space --focus 6
meh + cmd - 7 : yabai -m window --space  7; yabai -m space --focus 7
meh + cmd - 8 : yabai -m window --space  8; yabai -m space --focus 8
meh + cmd - 9 : yabai -m window --space  9; yabai -m space --focus 9
meh + cmd - 0 : yabai -m window --space 10; yabai -m space --focus 10

# Mission control
meh - k : yabai -m space --toggle mission-control

# Enable only these shortcuts in test mode
# fast focus desktop
test < meh - c : yabai -m space --focus recent
test < meh - h : yabai -m space --focus prev
test < meh - l : yabai -m space --focus next
test < meh - 0x53 : yabai -m space --focus 1
test < meh - 0x54 : yabai -m space --focus 2
test < meh - 0x55 : yabai -m space --focus 3
test < meh - 0x56 : yabai -m space --focus 4
test < meh - 0x57 : yabai -m space --focus 5
test < meh - 0x58 : yabai -m space --focus 6
test < meh - 0x59 : yabai -m space --focus 7
test < meh - 0x5B : yabai -m space --focus 8
test < meh - 0x5C: yabai -m space --focus 9
test < meh - 0x1E: yabai -m space --focus 10
# Mission control
test < meh - k : yabai -m space --toggle mission-control

# toggle window fullscreen zoom
meh - f : yabai -m window --toggle zoom-fullscreen

# float / unfloat window and center on screen
meh - t : yabai -m window --toggle float;\
          yabai -m window --grid 4:4:1:1:2:2
          # yabai -m window --grid 30:30:1:1:28:28
# toggle topmost
meh - b : yabai -m window --toggle topmost
#
# Float commands
# make floating window fill screen
ctrl + alt - 0x24 : yabai -m window --grid 1:1:0:0:1:1
# make floating window centered
ctrl + alt - c : yabai -m window --grid 4:4:1:1:2:2
# make floating window fill left-half of screen
ctrl + alt - h : yabai -m window --grid 1:2:0:0:1:1
# make floating window fill right-half of screen
ctrl + alt - l : yabai -m window --grid 1:2:1:0:1:1
# make floating window maximized with !
ctrl + alt - 0x2C : yabai -m window --grid 30:30:1:1:28:28

# # set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west
# ctrl + alt - j : yabai -m window --insert south
# ctrl + alt - k : yabai -m window --insert north
# ctrl + alt - l : yabai -m window --insert east

# set insertion point in focused container
# shift - 0x4B : yabai -m window --insert west
# shift - 0x4C : yabai -m window --insert south
# shift - 0x43 : yabai -m window --insert north
# shift + ctrl + l: yabai -m window --insert east
#
# # balance size of windows with =
meh - 0x1D : yabai -m space --balance

# # create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# # create desktop and follow focus - uses jq for parsing json (brew install jq)
# cmd + alt - n : yabai -m space --create && \
#                 index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
#                 yabai -m space --focus "${index}"

# # destroy desktop
# cmd + alt - w : yabai -m space --destroy



# # focus monitor
# ctrl + alt - x  : yabai -m display --focus recent
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - c  : yabai -m display --focus next
# ctrl + alt - 1  : yabai -m display --focus 1
# ctrl + alt - 2  : yabai -m display --focus 2
# ctrl + alt - 3  : yabai -m display --focus 3

# # send window to monitor and follow focus
# ctrl + cmd - x  : yabai -m window --display recent; yabai -m display --focus recent
# ctrl + cmd - z  : yabai -m window --display prev; yabai -m display --focus prev
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1
# ctrl + cmd - 2  : yabai -m window --display 2; yabai -m display --focus 2
# ctrl + cmd - 3  : yabai -m window --display 3; yabai -m display --focus 3

# # move window
# shift + ctrl - q : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20
# shift + ctrl - z : yabai -m window --move rel:0:-20
# shift + ctrl - d : yabai -m window --move rel:20:0


# # toggle sticky (show on all spaces)
# alt - s : yabai -m window --toggle sticky

# # toggle topmost (keep above other windows)
# alt - o : yabai -m window --toggle topmost

# # toggle sticky, topmost and resize to picture-in-picture size
# alt - p : yabai -m window --toggle sticky;\
#           yabai -m window --toggle topmost;\
#           yabai -m window --grid 5:5:4:0:1:1

# change layout of desktop
# ctrl + alt - m : yabai -m space --layout bsp
# meh - t : yabai -m space --layout float
#
